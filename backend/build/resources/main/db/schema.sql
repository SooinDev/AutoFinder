-- ========================================
-- AutoFinder Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà (ÏµúÏ¢Ö ÏôÑÏÑ± Î≤ÑÏ†Ñ)
-- Ï∞®Îüâ ÎπÑÍµê Í∏∞Îä• Ìè¨Ìï®
-- ========================================

-- Ï∞®Îüâ ÌÖåÏù¥Î∏î
CREATE TABLE cars (
                      id BIGINT AUTO_INCREMENT PRIMARY KEY,
                      car_type VARCHAR(50) NOT NULL,
                      model VARCHAR(100) NOT NULL,
                      year VARCHAR(20) NOT NULL,
                      mileage BIGINT DEFAULT NULL COMMENT 'Ï£ºÌñâÍ±∞Î¶¨ (km, NULL ÌóàÏö©)',
                      price BIGINT UNSIGNED NOT NULL DEFAULT 0,
                      fuel VARCHAR(20) NOT NULL,
                      region VARCHAR(50) NOT NULL,
                      url VARCHAR(255) UNIQUE,
                      image_url VARCHAR(255),
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Í≤ÄÏÉâ ÏµúÏ†ÅÌôî Ïù∏Îç±Ïä§
                      INDEX idx_model (model),
                      INDEX idx_price (price),
                      INDEX idx_year (year),
                      INDEX idx_fuel (fuel),
                      INDEX idx_region (region),
                      INDEX idx_created_at (created_at),
                      INDEX idx_search_combo (model, price, year, fuel)
);

-- ÏÇ¨Ïö©Ïûê ÌÖåÏù¥Î∏î
CREATE TABLE users (
                       id BIGINT AUTO_INCREMENT PRIMARY KEY,
                       username VARCHAR(50) NOT NULL UNIQUE,
                       password VARCHAR(255) NOT NULL,
                       role VARCHAR(20) NOT NULL
);

-- Ï¶êÍ≤®Ï∞æÍ∏∞ ÌÖåÏù¥Î∏î
CREATE TABLE favorites (
                           id BIGINT AUTO_INCREMENT PRIMARY KEY,
                           user_id BIGINT NOT NULL,
                           car_id BIGINT NOT NULL,
                           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Ï§ëÎ≥µ Î∞©ÏßÄÎ•º ÏúÑÌïú Ïú†ÎãàÌÅ¨ Ï†úÏïΩÏ°∞Í±¥
                           UNIQUE KEY unique_user_car (user_id, car_id),

                           FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                           FOREIGN KEY (car_id) REFERENCES cars(id) ON DELETE CASCADE,

    -- ÏÑ±Îä• ÏµúÏ†ÅÌôî Ïù∏Îç±Ïä§
                           INDEX idx_user_created (user_id, created_at),
                           INDEX idx_car_created (car_id, created_at)
);

-- üÜï Ï∞®Îüâ ÎπÑÍµê ÌÖåÏù¥Î∏î (ÏÉàÎ°ú Ï∂îÍ∞Ä)
CREATE TABLE car_comparisons (
                                 id BIGINT AUTO_INCREMENT PRIMARY KEY,
                                 user_id BIGINT DEFAULT NULL COMMENT 'ÏÇ¨Ïö©Ïûê ID (ÎπÑÎ°úÍ∑∏Ïù∏ ÏÇ¨Ïö©ÏûêÎäî NULL)',
                                 car_ids VARCHAR(500) NOT NULL COMMENT 'ÎπÑÍµê Ï∞®Îüâ IDÎì§ (ÏâºÌëú Íµ¨Î∂Ñ: 1,2,3)',
                                 comparison_name VARCHAR(200) DEFAULT NULL COMMENT 'ÏÇ¨Ïö©Ïûê ÏßÄÏ†ï ÎπÑÍµê Ïù¥Î¶Ñ',
                                 comparison_data TEXT DEFAULT NULL COMMENT 'ÎπÑÍµê Í≤∞Í≥º JSON Îç∞Ïù¥ÌÑ∞ (ÏÑ†ÌÉùÏÇ¨Ìï≠)',
                                 created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'ÏÉùÏÑ±ÏùºÏãú',

    -- Ïù∏Îç±Ïä§ ÏÉùÏÑ±
                                 INDEX idx_user_comparison (user_id),
                                 INDEX idx_created_at (created_at),
                                 INDEX idx_car_ids (car_ids(100)),
                                 INDEX idx_user_created_at (user_id, created_at),

    -- Ïô∏ÎûòÌÇ§ Ï†úÏïΩÏ°∞Í±¥
                                 FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) COMMENT = 'Ï∞®Îüâ ÎπÑÍµê Í∏∞Î°ù ÌÖåÏù¥Î∏î';

-- ÏÇ¨Ïö©Ïûê ÏÑ†Ìò∏ÎèÑ ÌÖåÏù¥Î∏î
CREATE TABLE user_preferences (
                                  id BIGINT AUTO_INCREMENT PRIMARY KEY,
                                  user_id BIGINT NOT NULL,
                                  min_price BIGINT,
                                  max_price BIGINT,
                                  min_year INT,
                                  max_year INT,
                                  max_mileage BIGINT,
                                  preferred_brands VARCHAR(255),
                                  preferred_fuel_types VARCHAR(255),
                                  preferred_regions VARCHAR(255),
                                  preference_score DOUBLE DEFAULT 0.0,
                                  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

                                  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- ÏÇ¨Ïö©ÏûêÎãπ ÌïòÎÇòÏùò ÏÑ†Ìò∏ÎèÑÎßå ÌóàÏö©
                                  UNIQUE KEY unique_user_preference (user_id)
);

-- ÏÇ¨Ïö©Ïûê ÌñâÎèô ÌÖåÏù¥Î∏î
CREATE TABLE user_behaviors (
                                id BIGINT AUTO_INCREMENT PRIMARY KEY,
                                user_id BIGINT NOT NULL,
                                car_id BIGINT NOT NULL,
                                action_type VARCHAR(50) NOT NULL,
                                value VARCHAR(255),
                                timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                session_id VARCHAR(100),
                                user_agent VARCHAR(255),
                                ip_address VARCHAR(45),
                                referrer VARCHAR(500),
                                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- ÏÑ±Îä• ÏµúÏ†ÅÌôî Ïù∏Îç±Ïä§
                                INDEX idx_user_timestamp (user_id, timestamp),
                                INDEX idx_car_timestamp (car_id, timestamp),
                                INDEX idx_action_type (action_type),
                                INDEX idx_timestamp (timestamp),
                                INDEX idx_session (session_id),
                                INDEX idx_user_car (user_id, car_id),
                                INDEX idx_user_action (user_id, action_type),

    -- Ïô∏ÎûòÌÇ§ Ï†úÏïΩÏ°∞Í±¥
                                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                                FOREIGN KEY (car_id) REFERENCES cars(id) ON DELETE CASCADE
);

-- ÌñâÎèô ÌÉÄÏûÖ Ï†úÏïΩÏ°∞Í±¥ (Îç∞Ïù¥ÌÑ∞ ÏùºÍ¥ÄÏÑ±) - üÜï COMPARE Ï∂îÍ∞Ä
ALTER TABLE user_behaviors
    ADD CONSTRAINT chk_action_type
        CHECK (action_type IN (
                               'VIEW',          -- ÌéòÏù¥ÏßÄ Ï°∞Ìöå
                               'CLICK',         -- ÌÅ¥Î¶≠
                               'DETAIL_VIEW',   -- ÏÉÅÏÑ∏Î≥¥Í∏∞
                               'SEARCH',        -- Í≤ÄÏÉâ
                               'FILTER',        -- ÌïÑÌÑ∞ Ï†ÅÏö©
                               'BOOKMARK',      -- Î∂ÅÎßàÌÅ¨
                               'SHARE',         -- Í≥µÏú†
                               'FAVORITE',      -- Ï¶êÍ≤®Ï∞æÍ∏∞
                               'INQUIRY',       -- Î¨∏Ïùò
                               'CONTACT',       -- Ïó∞ÎùΩÌïòÍ∏∞
                               'DOWNLOAD',      -- Îã§Ïö¥Î°úÎìú
                               'COMPARE'        -- ÎπÑÍµêÌïòÍ∏∞
            ));

-- ========================================
-- üÜï ÎπÑÍµê Í∏∞Îä•ÏùÑ ÏúÑÌïú Î∂ÑÏÑù Î∑∞
-- ========================================

-- ÎπÑÍµê ÌÜµÍ≥Ñ Î∑∞
CREATE VIEW comparison_statistics AS
SELECT
    DATE(created_at) as comparison_date,
    COUNT(*) as daily_comparisons,
    COUNT(DISTINCT user_id) as unique_users,
    AVG(CHAR_LENGTH(car_ids) - CHAR_LENGTH(REPLACE(car_ids, ',', '')) + 1) as avg_cars_per_comparison,
    COUNT(CASE WHEN comparison_name IS NOT NULL THEN 1 END) as saved_comparisons,
    ROUND(COUNT(CASE WHEN comparison_name IS NOT NULL THEN 1 END) * 100.0 / COUNT(*), 2) as save_rate_percent
FROM car_comparisons
WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY DATE(created_at)
ORDER BY comparison_date DESC;

-- Ïù∏Í∏∞ Ï∞®Îüâ ÎπÑÍµê Î∑∞
CREATE VIEW popular_comparison_cars AS
SELECT
    car_id,
    c.model,
    SUBSTRING_INDEX(c.model, ' ', 1) as brand,
    comparison_count,
    RANK() OVER (ORDER BY comparison_count DESC) as popularity_rank
FROM (
         SELECT
             CAST(TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(cc.car_ids, ',', numbers.n), ',', -1)) AS UNSIGNED) as car_id,
             COUNT(*) as comparison_count
         FROM car_comparisons cc
                  CROSS JOIN (
             SELECT 1 n UNION ALL SELECT 2 UNION ALL SELECT 3
             UNION ALL SELECT 4 UNION ALL SELECT 5
         ) numbers
         WHERE CHAR_LENGTH(cc.car_ids) - CHAR_LENGTH(REPLACE(cc.car_ids, ',', '')) >= numbers.n - 1
           AND cc.created_at >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
           AND TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(cc.car_ids, ',', numbers.n), ',', -1)) REGEXP '^[0-9]+$'
         GROUP BY car_id
         HAVING comparison_count >= 2
     ) popularity
         LEFT JOIN cars c ON popularity.car_id = c.id
WHERE c.id IS NOT NULL
ORDER BY comparison_count DESC;

-- ========================================
-- Í∏∞Ï°¥ Î∂ÑÏÑùÏö© Î∑∞ (Í∞úÏÑ†Îê®)
-- ========================================

-- ÏÇ¨Ïö©Ïûê ÌñâÎèô ÏöîÏïΩ Î∑∞ (ÎπÑÍµê ÌñâÎèô Ìè¨Ìï®)
CREATE VIEW user_behavior_summary AS
SELECT
    user_id,
    COUNT(*) as total_actions,
    COUNT(DISTINCT car_id) as unique_cars_viewed,
    COUNT(DISTINCT action_type) as action_diversity,
    MAX(timestamp) as last_activity,
    MIN(timestamp) as first_activity,
    DATEDIFF(MAX(timestamp), MIN(timestamp)) as active_days,
    COUNT(CASE WHEN action_type = 'COMPARE' THEN 1 END) as comparison_actions,
    AVG(CASE
            WHEN action_type = 'VIEW' THEN 1
            WHEN action_type = 'CLICK' THEN 1.5
            WHEN action_type = 'DETAIL_VIEW' THEN 2
            WHEN action_type = 'BOOKMARK' THEN 3
            WHEN action_type = 'INQUIRY' THEN 4
            WHEN action_type = 'FAVORITE' THEN 5
            WHEN action_type = 'CONTACT' THEN 6
            WHEN action_type = 'COMPARE' THEN 3.5  -- üÜï ÎπÑÍµê Í∞ÄÏ§ëÏπò
            ELSE 1
        END) as avg_engagement_score
FROM user_behaviors
GROUP BY user_id;

-- Ï∞®Îüâ Ïù∏Í∏∞ÎèÑ ÏöîÏïΩ Î∑∞ (ÎπÑÍµê Ï†êÏàò Ìè¨Ìï®)
CREATE VIEW car_popularity_summary AS
SELECT
    car_id,
    COUNT(*) as total_interactions,
    COUNT(DISTINCT user_id) as unique_users,
    COUNT(CASE WHEN action_type IN ('FAVORITE', 'INQUIRY', 'CONTACT', 'COMPARE') THEN 1 END) as high_intent_actions,
    COUNT(CASE WHEN action_type = 'COMPARE' THEN 1 END) as comparison_count,
    SUM(CASE
            WHEN action_type = 'VIEW' THEN 1
            WHEN action_type = 'CLICK' THEN 1.5
            WHEN action_type = 'DETAIL_VIEW' THEN 2
            WHEN action_type = 'BOOKMARK' THEN 3
            WHEN action_type = 'INQUIRY' THEN 4
            WHEN action_type = 'FAVORITE' THEN 5
            WHEN action_type = 'CONTACT' THEN 6
            WHEN action_type = 'COMPARE' THEN 3.5  -- üÜï ÎπÑÍµê Í∞ÄÏ§ëÏπò
            ELSE 1
        END) as popularity_score,
    MAX(timestamp) as last_interaction
FROM user_behaviors
GROUP BY car_id
ORDER BY popularity_score DESC;

-- Ïã§ÏãúÍ∞Ñ ÌôúÎèô Î™®ÎãàÌÑ∞ÎßÅ Î∑∞ (ÎπÑÍµê ÌôúÎèô Ìè¨Ìï®)
CREATE VIEW real_time_activity AS
SELECT
    action_type,
    COUNT(*) as action_count,
    COUNT(DISTINCT user_id) as unique_users,
    MAX(timestamp) as latest_action
FROM user_behaviors
WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
GROUP BY action_type
ORDER BY action_count DESC;

-- üÜï ÏÇ¨Ïö©Ïûê ÎπÑÍµê ÌôúÎèô Î∑∞
CREATE VIEW user_comparison_activity AS
SELECT
    cc.user_id,
    u.username,
    COUNT(*) as total_comparisons,
    MIN(cc.created_at) as first_comparison,
    MAX(cc.created_at) as last_comparison,
    DATEDIFF(MAX(cc.created_at), MIN(cc.created_at)) as active_days,
    AVG(CHAR_LENGTH(cc.car_ids) - CHAR_LENGTH(REPLACE(cc.car_ids, ',', '')) + 1) as avg_cars_per_comparison,
    COUNT(CASE WHEN cc.comparison_name IS NOT NULL THEN 1 END) as saved_comparisons,
    CASE
        WHEN COUNT(*) = 1 THEN 'One-time'
        WHEN COUNT(*) BETWEEN 2 AND 5 THEN 'Casual'
        WHEN COUNT(*) BETWEEN 6 AND 15 THEN 'Regular'
        ELSE 'Power User'
        END as user_segment
FROM car_comparisons cc
         LEFT JOIN users u ON cc.user_id = u.id
WHERE cc.user_id IS NOT NULL
GROUP BY cc.user_id, u.username;

-- ========================================
-- üÜï ÎπÑÍµê Í∏∞Îä•ÏùÑ ÏúÑÌïú Ï†ÄÏû• ÌîÑÎ°úÏãúÏ†Ä
-- ========================================

DELIMITER //

-- ÌäπÏ†ï Ï∞®ÎüâÍ≥º ÏûêÏ£º ÎπÑÍµêÎêòÎäî Ï∞®ÎüâÎì§ Ï°∞Ìöå
CREATE PROCEDURE GetFrequentlyComparedCars(
    IN target_car_id BIGINT,
    IN limit_count INT DEFAULT 10
)
BEGIN
    SELECT
        other_car_id,
        c.model as other_car_model,
        c.price as other_car_price,
        c.year as other_car_year,
        co_comparison_count,
        ROUND(co_comparison_count * 100.0 / total_comparisons.total, 2) as comparison_percentage
    FROM (
             SELECT
                 CAST(other_car.car_id AS UNSIGNED) as other_car_id,
                 COUNT(*) as co_comparison_count
             FROM (
                      SELECT
                          cc.id,
                          TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(cc.car_ids, ',', numbers.n), ',', -1)) as car_id
                      FROM car_comparisons cc
                               CROSS JOIN (
                          SELECT 1 n UNION ALL SELECT 2 UNION ALL SELECT 3
                          UNION ALL SELECT 4 UNION ALL SELECT 5
                      ) numbers
                      WHERE CHAR_LENGTH(cc.car_ids) - CHAR_LENGTH(REPLACE(cc.car_ids, ',', '')) >= numbers.n - 1
                        AND cc.car_ids LIKE CONCAT('%', target_car_id, '%')
                        AND cc.created_at >= DATE_SUB(CURDATE(), INTERVAL 90 DAY)
                  ) target_car
                      JOIN (
                 SELECT
                     cc.id,
                     TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(cc.car_ids, ',', numbers.n), ',', -1)) as car_id
                 FROM car_comparisons cc
                          CROSS JOIN (
                     SELECT 1 n UNION ALL SELECT 2 UNION ALL SELECT 3
                     UNION ALL SELECT 4 UNION ALL SELECT 5
                 ) numbers
                 WHERE CHAR_LENGTH(cc.car_ids) - CHAR_LENGTH(REPLACE(cc.car_ids, ',', '')) >= numbers.n - 1
             ) other_car ON target_car.id = other_car.id
             WHERE target_car.car_id = target_car_id
               AND other_car.car_id != target_car_id
               AND other_car.car_id REGEXP '^[0-9]+$'
             GROUP BY other_car.car_id
             ORDER BY co_comparison_count DESC
             LIMIT limit_count
         ) freq_compared
             CROSS JOIN (
        SELECT COUNT(*) as total
        FROM car_comparisons
        WHERE car_ids LIKE CONCAT('%', target_car_id, '%')
          AND created_at >= DATE_SUB(CURDATE(), INTERVAL 90 DAY)
    ) total_comparisons
             LEFT JOIN cars c ON freq_compared.other_car_id = c.id
    WHERE c.id IS NOT NULL
    ORDER BY co_comparison_count DESC;
END //

-- ÎπÑÍµê Ìä∏Î†åÎìú Î∂ÑÏÑù
CREATE PROCEDURE GetComparisonTrends(
    IN days_back INT DEFAULT 30
)
BEGIN
    SELECT
        comparison_date,
        daily_comparisons,
        unique_users,
        avg_cars_per_comparison,
        save_rate_percent,
        LAG(daily_comparisons) OVER (ORDER BY comparison_date) as prev_day_comparisons,
        ROUND(
                CASE
                    WHEN LAG(daily_comparisons) OVER (ORDER BY comparison_date) > 0 THEN
                        (daily_comparisons - LAG(daily_comparisons) OVER (ORDER BY comparison_date)) * 100.0 /
                        LAG(daily_comparisons) OVER (ORDER BY comparison_date)
                    ELSE 0
                    END, 2
        ) as daily_growth_percent
    FROM comparison_statistics
    WHERE comparison_date >= DATE_SUB(CURDATE(), INTERVAL days_back DAY)
    ORDER BY comparison_date DESC;
END //

DELIMITER ;

-- ========================================
-- üÜï Ï∂îÍ∞Ä ÏµúÏ†ÅÌôî Ïù∏Îç±Ïä§
-- ========================================

-- Ï∞®Îüâ ÌÖåÏù¥Î∏î Ï∂îÍ∞Ä Ïù∏Îç±Ïä§
CREATE INDEX idx_cars_price_year ON cars(price, year);
CREATE INDEX idx_cars_model_price ON cars(model, price);

-- ÎπÑÍµê ÌÖåÏù¥Î∏î Ï∂îÍ∞Ä Ïù∏Îç±Ïä§
CREATE INDEX idx_comparisons_user_created ON car_comparisons(user_id, created_at DESC);

-- ÌñâÎèô ÌÖåÏù¥Î∏î Ï∂îÍ∞Ä Ïù∏Îç±Ïä§
CREATE INDEX idx_behaviors_action_timestamp ON user_behaviors(action_type, timestamp);

-- ========================================
-- üÜï Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Î∞è Ïú†ÏßÄÎ≥¥Ïàò
-- ========================================

-- 90Ïùº Ïù¥ÏÉÅ Îêú ÏùµÎ™Ö ÏÇ¨Ïö©Ïûê ÎπÑÍµê Í∏∞Î°ù Ï†ïÎ¶¨ Ïù¥Î≤§Ìä∏ (Îß§Ï£º Ïã§Ìñâ)
SET GLOBAL event_scheduler = ON;

DELIMITER //
CREATE EVENT IF NOT EXISTS cleanup_old_anonymous_comparisons
    ON SCHEDULE EVERY 1 WEEK
        STARTS CURRENT_TIMESTAMP
    DO
    BEGIN
        DELETE FROM car_comparisons
        WHERE user_id IS NULL
          AND created_at < DATE_SUB(NOW(), INTERVAL 90 DAY);

        -- Ïò§ÎûòÎêú ÌñâÎèô Îç∞Ïù¥ÌÑ∞ÎèÑ Ï†ïÎ¶¨ (6Í∞úÏõî Ïù¥ÏÉÅ)
        DELETE FROM user_behaviors
        WHERE timestamp < DATE_SUB(NOW(), INTERVAL 180 DAY);
    END //
DELIMITER ;

-- ========================================
-- Ï¥àÍ∏∞ ÏÑ§Ï†ï Î∞è ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞
-- ========================================

-- Í∏∞Î≥∏ Í¥ÄÎ¶¨Ïûê ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± (ÎπÑÎ∞ÄÎ≤àÌò∏Îäî Ïã§Ï†ú ÏÇ¨Ïö©Ïãú Î≥ÄÍ≤Ω ÌïÑÏöî)
-- INSERT INTO users (username, password, role) VALUES
-- ('admin', '$2a$10$example_encrypted_password', 'ADMIN');

-- ÌÖåÏä§Ìä∏Ïö© Ï∞®Îüâ Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†ú Ïö¥ÏòÅÏãú Ï†úÍ±∞)
/*
INSERT INTO cars (car_type, model, year, mileage, price, fuel, region, image_url) VALUES
('Íµ≠ÏÇ∞Ï∞®', 'ÌòÑÎåÄ ÏïÑÎ∞òÎñº', '2022ÎÖÑÏãù', 25000, 2500, 'Í∞ÄÏÜîÎ¶∞', 'ÏÑúÏö∏', '/images/avante.jpg'),
('Íµ≠ÏÇ∞Ï∞®', 'Í∏∞ÏïÑ K5', '2021ÎÖÑÏãù', 35000, 3200, 'Í∞ÄÏÜîÎ¶∞', 'Í≤ΩÍ∏∞', '/images/k5.jpg'),
('ÏàòÏûÖÏ∞®', 'BMW 3ÏãúÎ¶¨Ï¶à', '2020ÎÖÑÏãù', 45000, 4500, 'Í∞ÄÏÜîÎ¶∞', 'ÏÑúÏö∏', '/images/bmw3.jpg');
*/

-- ========================================
-- ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏøºÎ¶¨ (Ï∞∏Í≥†Ïö©)
-- ========================================

-- ÌÖåÏù¥Î∏î ÌÅ¨Í∏∞ ÌôïÏù∏
/*
SELECT
    table_name,
    ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'DB Size (MB)'
FROM information_schema.tables
WHERE table_schema = 'autofinder'
ORDER BY (data_length + index_length) DESC;
*/

-- Ïù∏Îç±Ïä§ ÏÇ¨Ïö©Î•† ÌôïÏù∏
/*
SELECT
    t.table_name,
    s.index_name,
    s.cardinality,
    s.sub_part,
    s.nullable
FROM information_schema.tables t
LEFT JOIN information_schema.statistics s ON t.table_name = s.table_name
WHERE t.table_schema = 'autofinder'
AND t.table_type = 'BASE TABLE'
ORDER BY t.table_name, s.seq_in_index;
*/